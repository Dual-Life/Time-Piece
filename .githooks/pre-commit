#!/usr/bin/env perl

use strict;
use warnings;

# Check if Piece.pm has been modified
my $git_diff = `git diff --cached --name-only`;
exit 0 unless $git_diff =~ /Piece\.pm/;

print "Updating README.md with latest POD from Piece.pm...\n";

# Check if Pod::Markdown is installed
eval { require Pod::Markdown };
if ($@) {
    print "Error: Pod::Markdown is required but not installed.\n";
    print "Please install it with: cpanm Pod::Markdown\n";
    exit 1;
}

# Convert POD to Markdown
my $parser = Pod::Markdown->new;
$parser->parse_from_file('Piece.pm');
my $pod_markdown = $parser->as_markdown;

# Read the existing README.md
open my $fh, '<', 'README.md' or die "Cannot open README.md: $!";
my $readme = do { local $/; <$fh> };
close $fh;

my ( $before, $after ) =
  $readme =~ /(.*?)## Documentation\n+.*?(## Development.*?$)/s;

$before .= "## Documentation\n\n";

# If still failed, create a basic structure
unless ( $before && $after ) {
    $before =
"# Time::Piece\n\n[![CI Tests](https://github.com/Dual-Life/Time-Piece/actions/workflows/ci.yml/badge.svg)](https://github.com/Dual-Life/Time-Piece/actions/workflows/ci.yml)\n\nA Perl module that replaces the standard `localtime` and `gmtime` functions with implementations that return objects.\n\n## Documentation\n\n";
    $after =
      "\n## Development Instructions\n\n[Your development instructions here]";
}

# Create the new README content
my $new_readme = $before . $pod_markdown . "\n" . $after;

# Write the new README
open $fh, '>', 'README.md' or die "Cannot write to README.md: $!";
print $fh $new_readme;
close $fh;

# Stage the updated README
system( 'git', 'add', 'README.md' );

print "README.md updated with latest POD from Piece.pm\n";
exit 0;
